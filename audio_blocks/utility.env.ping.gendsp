{
 "patcher": {
  "fileversion": 1,
  "appversion": {
   "major": 9,
   "minor": 0,
   "revision": 9,
   "architecture": "x64",
   "modernui": 1
  },
  "classnamespace": "dsp.gen",
  "rect": [
   243.0,
   185.0,
   1061.0,
   595.0
  ],
  "gridsize": [
   15.0,
   15.0
  ],
  "boxes": [
   {
    "box": {
     "id": "obj-9",
     "maxclass": "newobj",
     "numinlets": 1,
     "numoutlets": 0,
     "patching_rect": [
      515.0,
      883.0,
      35.0,
      22.0
     ],
     "text": "out 5"
    }
   },
   {
    "box": {
     "id": "obj-8",
     "maxclass": "newobj",
     "numinlets": 1,
     "numoutlets": 0,
     "patching_rect": [
      398.75,
      882.0,
      35.0,
      22.0
     ],
     "text": "out 4"
    }
   },
   {
    "box": {
     "id": "obj-6",
     "maxclass": "newobj",
     "numinlets": 1,
     "numoutlets": 0,
     "patching_rect": [
      282.5,
      882.0,
      35.0,
      22.0
     ],
     "text": "out 3"
    }
   },
   {
    "box": {
     "id": "obj-7",
     "maxclass": "newobj",
     "numinlets": 1,
     "numoutlets": 0,
     "patching_rect": [
      166.25,
      882.0,
      35.0,
      22.0
     ],
     "text": "out 2"
    }
   },
   {
    "box": {
     "id": "obj-1",
     "maxclass": "newobj",
     "numinlets": 0,
     "numoutlets": 1,
     "outlettype": [
      ""
     ],
     "patching_rect": [
      13.0,
      6.0,
      28.0,
      22.0
     ],
     "text": "in 1"
    }
   },
   {
    "box": {
     "id": "obj-2",
     "maxclass": "newobj",
     "numinlets": 0,
     "numoutlets": 1,
     "outlettype": [
      ""
     ],
     "patching_rect": [
      528.5,
      6.0,
      28.0,
      22.0
     ],
     "text": "in 2"
    }
   },
   {
    "box": {
     "code": "Buffer prm(\"voice_parameter_buffer\");\nBuffer changed_flags(\"changed_flags\");\n\n// main parameters\nHistory ti,mu,ar,cu,lo,ve,ac,i1,i2,o2,ga;\nHistory curve_base(0.5);\nHistory same_flag(1);\n\n// state\nHistory ov(0);\nHistory oov(0);\nHistory otrig(0);\nHistory otr(0);\nHistory env(0);\nHistory attdone(1);\nHistory decdone(1);\nHistory target(0);\nHistory attrate(0.00001);\nHistory decrate(0.00001);\nHistory looptime(0);\nHistory looptimer(0);\nHistory upda(0);\nHistory attack_u(1);\nHistory release_u(1);\nHistory attack_start(0);\nHistory release_start(0);\nHistory attack_target(0);\nHistory release_target(0);\n\n// tap measurement state\nParam tap_ms(-1);     // measured tap interval (ms), -1 until it receives a value\nHistory last_tap_ms(500);\n\n// envelope total time\nHistory total_time(0);\nHistory tap_ratio(1);\n\nParam voice_offset(0);\nParam voice_is(0);\nParam tr(0);\nParam v(0);\nParam panic(0);\n\n// ---- parameter update ----\nif (upda <= 0) {\n    upda = vectorsize + 4;\n    if (peek(changed_flags, voice_is, 0) > 0) {\n        changed_flags.poke(0, voice_is);\n        ti = peek(prm, voice_offset, 0, channels=1);\n        mu = peek(prm, 1+voice_offset, 0, channels=1);\n        ar = peek(prm, 2+voice_offset, 0, channels=1);\n        ar = clip(ar, 0.001, 0.999);\n        cu = peek(prm, 3+voice_offset, 0, channels=1);\n        lo = peek(prm, 4+voice_offset, 0, channels=1);\n        ve = peek(prm, 5+voice_offset, 0, channels=1)*2 - 1;\n        ac = peek(prm, 6+voice_offset, 0, channels=1)*2 - 1;\n        i1 = floor(5*peek(prm, 7+voice_offset, 0, channels=1));\n        i2 = floor(3*peek(prm, 8+voice_offset, 0, channels=1));\n        o2 = floor(4*peek(prm, 9+voice_offset, 0, channels=1));\n        ga = 2*peek(prm, 10+voice_offset, 0, channels=1)-1;\n        same_flag = peek(prm, 11+voice_offset, 0, channels=1)>0.5;\n        curve_base = 1 - clip(cu, 0, 1);\n\t\tmu = max(0.000001, 2*mu);\n\t\t// tap ratio table\n\t\ttap_selector = floor(ti * 18) + 1;\n\t\ttap_ratio = selector(\n    \t\ttap_selector,\n    \t\t0.0625,0.0833333,0.125,0.1666667,0.25,0.3333333,0.5,0.6666667,1,\n    \t\t1.3333333,2,4,8,12,16,20,24,28,32\n\t\t);\n    }\n}\nupda -= 1;\n\nhave_tap = tap_ms > -1;\nif (have_tap) {\n    alpha = 0.2;                                 // smoothing\n    last_tap_ms = alpha*tap_ms + (1-alpha)*last_tap_ms;\n}\n\n\n// decide total_time\nif (have_tap) {\n    total_time = last_tap_ms * tap_ratio * mu;\n} else {\n    total_time = (pow(1000, ti)-1+1e-10)*60.06006006 * mu;\n}\n\n// attack/decay split\nat = total_time * ar;\nde = total_time * (1 - ar);\nattack_samples = max(1, mstosamps(max(0.001, at)));\nrelease_samples = max(1, mstosamps(max(0.001, de)));\nattrate = 1 / attack_samples;\ndecrate = 1 / release_samples;\nlooptime = mstosamps(total_time);\nstart_attack=0;\nstart_release=0;\n\nif ((looptimer <= 0) && (lo)) {\n    ov = ov*lo;\n    if (ov > 0.001) {\n        attdone=0;\n        decdone=1;\n        start_attack=1;\n        target=ov*lo;\n        looptimer=looptime;\n    }\n}\n\n// ---- trigger logic ----\nvi=0;\nlevscale=0;\ntrig=0;\n\n// accept trigger edges regardless of attdone\nif (delta(tr)) trig += tr;\n\n// loop retrigger from lo input\nif ((delta(lo > 0) > 0) && (env == 0)) {\n    trig = 1;\n}\n\natr = attrate;\nder = decrate;\ncurve_temp = curve_base;\n\nif (i1==0) {\n    trig += (in1 > 0.00000001);\n    levscale += trig;\n} else if (i1==1) {\n    levscale += trig;\n    trig = 0;\n    otrig=0;\n    vi += in1;\n    curve_temp = clip(curve_temp, 0.25, 0.75);\n} else if (i1==2) {\n    atr /= (1+in1);\n} else if (i1==3) {\n    der /= (1+in1);\n} else if (i1==4) {\n    atr /= (1+in1);\n    der /= (1+in1);\n}\ndecay_shape = curve_temp;\nattack_shape = same_flag ? (1 - curve_temp) : curve_temp;\n\nif (in2 != 0) {\n    if (i2==0) {\n        atr /= (1+in2);\n    } else if (i2==1) {\n        der /= (1+in2);\n    } else if (i2==2) {\n        atr /= (1+in2);\n        der /= (1+in2);\n    }\n}\nif (panic) {\n    target=0;\n    decdone=0;\n    start_release=1;\n    der=max(der, 0.001);\n    env*=0.999;\n}\n\nif (v > 0) {\n    levscale = v * ve + (1-clip(ve,0,2));\n    trig += levscale;\n}\nif (vi != oov) {\n    oov=vi;\n    ov=vi;\n    target=vi;\n    if (target < env) {\n        attdone=1;\n        decdone=0;\n        start_release=1;\n    } else if (target > env) {\n        decdone=1;\n        attdone=0;\n        start_attack=1;\n    }\n}\n\n// retrigger envelope whenever trig changes\nif (trig != otrig) {\n    if (trig != 0) {\n        attdone=0;\n        decdone=1;\n        start_attack=1;\n        otrig=trig;\n        ov = levscale + ac*env;\n        ov /= 2;\n        ov = clip(ov,-2,2);\n        ov = ov - (ov*ov*ov/3);\n        ov *= 2;\n        target=ov;\n        looptimer=looptime;\n    } else {\n        trig = 0;\n        otrig = 0;\n    }\n}\n\n// ---- envelope generator ----\ninit_attack = start_attack;\ninit_release = start_release;\n\nif (init_attack) {\n    attack_start = env;\n    attack_target = target;\n    attack_u = 0;\n}\n\nif (!attdone) {\n    step = clip(abs(atr), 0.000000001, 1);\n    attack_u = min(attack_u + step, 1);\n    shape = clip(attack_shape, 0, 1);\n    u = clip(attack_u, 0, 1);\n    power = 1;\n    shaped = u;\n    if (shape <= 0.5) {\n        blend = shape * 2;\n        power = 4 - 3 * blend;\n        shaped = pow(u, power);\n    } else {\n        blend = (shape - 0.5) * 2;\n        power = 1 + 3 * blend;\n        shaped = 1 - pow(1 - u, power);\n    }\n    env = attack_start + (attack_target - attack_start) * shaped;\n    if ((attack_u >= 0.999999) || (abs(env - attack_target) < 0.000001)) {\n        env = attack_target;\n        attack_u = 1;\n        attdone=1;\n        if (i1 != 1) {\n            decdone=0;\n            target=0;\n            trig=0;\n            init_release = 1;\n        }\n    }\n}\n\nif (init_release) {\n    release_start = env;\n    release_target = target;\n    release_u = 0;\n}\n\nif (!decdone) {\n    step = clip(abs(der), 0.000000001, 1);\n    release_u = min(release_u + step, 1);\n    shape = clip(decay_shape, 0, 1);\n    u = clip(release_u, 0, 1);\n    power = 1;\n    shaped = u;\n    if (shape <= 0.5) {\n        blend = shape * 2;\n        power = 4 - 3 * blend;\n        shaped = pow(u, power);\n    } else {\n        blend = (shape - 0.5) * 2;\n        power = 1 + 3 * blend;\n        shaped = 1 - pow(1 - u, power);\n    }\n    env = release_start + (release_target - release_start) * shaped;\n    if ((release_u >= 0.999999) || (abs(env - release_target) < 0.000001)) {\n        env=release_target;\n        release_u = 1;\n        decdone=1;\n    }\n}\n\nlooptimer -= 1;\n\n// ---- outputs ----\nout1 = ga*env;\n\nif (o2==0) {\n    out2 = target;//tap_ratio;//\n} else if (o2==1) {\n    out2 = attdone;\n} else if (o2==2) {\n    out2 = decdone;\n} else {\n    out2 = delta(env);\n}\n\nout3 = attdone;\nout4 = decdone;\nout5 = (env < 0.0001) * (attdone) * (lo==0) * (in1==0) * (in2==0);\n",
     "fontface": 0,
     "fontname": "<Monospaced>",
     "fontsize": 12.0,
     "id": "obj-3",
     "maxclass": "codebox",
     "numinlets": 2,
     "numoutlets": 5,
     "outlettype": [
      "",
      "",
      "",
      "",
      ""
     ],
     "patching_rect": [
      56.0,
      39.0,
      964.0,
      594.0
     ]
    }
   },
   {
    "box": {
     "id": "obj-4",
     "maxclass": "newobj",
     "numinlets": 1,
     "numoutlets": 0,
     "patching_rect": [
      50.0,
      882.0,
      35.0,
      22.0
     ],
     "text": "out 1"
    }
   }
  ],
  "lines": [
   {
    "patchline": {
     "destination": [
      "obj-3",
      0
     ],
     "source": [
      "obj-1",
      0
     ]
    }
   },
   {
    "patchline": {
     "destination": [
      "obj-3",
      1
     ],
     "source": [
      "obj-2",
      0
     ]
    }
   },
   {
    "patchline": {
     "destination": [
      "obj-4",
      0
     ],
     "source": [
      "obj-3",
      0
     ]
    }
   },
   {
    "patchline": {
     "destination": [
      "obj-6",
      0
     ],
     "source": [
      "obj-3",
      2
     ]
    }
   },
   {
    "patchline": {
     "destination": [
      "obj-7",
      0
     ],
     "source": [
      "obj-3",
      1
     ]
    }
   },
   {
    "patchline": {
     "destination": [
      "obj-8",
      0
     ],
     "source": [
      "obj-3",
      3
     ]
    }
   },
   {
    "patchline": {
     "destination": [
      "obj-9",
      0
     ],
     "source": [
      "obj-3",
      4
     ]
    }
   }
  ]
 }
}