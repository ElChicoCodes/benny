{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 8,
			"minor" : 5,
			"revision" : 7,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"classnamespace" : "dsp.gen",
		"rect" : [ 40.0, 82.0, 1061.0, 595.0 ],
		"bglocked" : 0,
		"openinpresentation" : 0,
		"default_fontsize" : 12.0,
		"default_fontface" : 0,
		"default_fontname" : "Arial",
		"gridonopen" : 1,
		"gridsize" : [ 15.0, 15.0 ],
		"gridsnaponopen" : 1,
		"objectsnaponopen" : 1,
		"statusbarvisible" : 2,
		"toolbarvisible" : 1,
		"lefttoolbarpinned" : 0,
		"toptoolbarpinned" : 0,
		"righttoolbarpinned" : 0,
		"bottomtoolbarpinned" : 0,
		"toolbars_unpinned_last_save" : 0,
		"tallnewobj" : 0,
		"boxanimatetime" : 200,
		"enablehscroll" : 1,
		"enablevscroll" : 1,
		"devicewidth" : 0.0,
		"description" : "",
		"digest" : "",
		"tags" : "",
		"style" : "",
		"subpatcher_template" : "",
		"assistshowspatchername" : 0,
		"boxes" : [ 			{
				"box" : 				{
					"id" : "obj-7",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 515.0, 662.0, 35.0, 22.0 ],
					"text" : "out 2"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 3.0, 4.0, 28.0, 22.0 ],
					"text" : "in 1"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 813.0, 4.0, 28.0, 22.0 ],
					"text" : "in 2"
				}

			}
, 			{
				"box" : 				{
					"code" : "Buffer buff(\"Waves.1\");\r\nBuffer prm(\"voice_parameter_buffer\");\r\n\r\nHistory current_position(0);\r\nHistory next_position(0);\r\nHistory current_read(0);\r\nHistory current_write(0);\r\nHistory playing(1);\r\n\r\nHistory slowcounter(0);\r\nHistory channel,rate,rinv,start,end,looplen,enabled(0),record,preserve,xfade,modein2;\r\nHistory length(0),ilength(0);\r\nHistory posmod_last(0), last_write(0);\r\n\r\nParam voice_is(0, min=0,default=0,max=4096);\r\nParam voice_offset(0);\r\nParam t(0);\r\n\r\nslowcounter-=1;\r\nif(slowcounter<0){\r\n\tlength = dim(buff);\r\n\tilength = 1/length;\r\n\tslowcounter=vectorsize;\r\n\tchannel = floor((peek(prm,1+ voice_offset,0, channels=1)*2));\r\n\trate = (2*peek(prm, 2+ voice_offset, 0,channels=1)-1);\r\n\tif(rate>=0){\r\n\t\trate = pow(2,rate) - 1;\r\n\t}else{\r\n\t\trate = -pow(2,-rate) + 1;\r\n\t}\r\n\trate *= 16;\r\n\tstart = floor(length * peek(prm, 3+ voice_offset,0, channels=1));\r\n\tend = floor(length * peek(prm, 4+ voice_offset,0, channels=1));\r\n\tif(end>=start){\r\n\t\tlooplen = end-start;\r\n\t}else{\r\n\t\tlooplen = length - start + end;\r\n\t}\r\n\toe=enabled;\r\n\tenabled = (peek(prm, 5+ voice_offset,0, channels=1)>0.5);\r\n\tif(looplen==0){\r\n\t\tenabled=0;\r\n\t\tplaying=0;\r\n\t}\r\n\tif(enabled>oe) playing=1;\r\n\trecord = peek(prm, 6+ voice_offset,0, channels=1);\r\n\tpreserve = peek(prm, 7+ voice_offset,0, channels=1);\r\n\txfade = samplerate*0.1*peek(prm, 8+voice_offset,0, channels=1);\r\n\tmodein2 = (peek(prm, 9 + voice_offset,0, channels=1)>0.5);\r\n}\r\ndiag=-1; \r\nws=0;\r\nif(playing){\r\n\tstep=0;\r\n\tif(modein2==0){\r\n\t\tstep = rate * (1+in2);\r\n\t\tposmod_last = 0;\r\n\t}else{\r\n\t\ti2l = in2 * length;\r\n\t\tstep = rate + i2l - posmod_last;\r\n\t\tposmod_last = i2l;\r\n\t}\r\n\tnext_position += step;\r\n\tnp_i = floor(next_position);\r\n\tnp_f = next_position - np_i;\r\n\tgain = step * record;//clip(abs(step),0,1) * record;\r\n\tcurrent_write += in1 * gain; //this isn't quite right - if a written sample goes over the boundary into the next one then the overhang is carried over\r\n\t\t// you could do that at the write step below instead though\r\n\t\r\n\tif(np_i != current_position){\r\n\t\tcarryover = in1 * np_f * record;// / abs(step);\r\n\t\tcurrent_write -= carryover;\r\n\t\tfill = abs(np_i-current_position);\r\n\t\t\r\n\t\tif((next_position<start)&&(step<0)){\r\n\t\t\tnext_position += looplen;\r\n\t\t\tif(next_position>length) next_position -= length;\r\n\t\t\tnp_i = floor(next_position);\r\n\t\t\t//np_f = next_position - np_i;\r\n\t\t\tif(!enabled) playing = 0;\r\n\t\t}\r\n\t\tif((next_position>end)&&(step>0)){\r\n\t\t\tnext_position -= looplen;\r\n\t\t\tif(next_position<0) next_position += length;\r\n\t\t\tnp_i = floor(next_position);\r\n\t\t\t//np_f = next_position - np_i;\r\n\t\t\tif(!enabled) playing = 0;\r\n\t\t}\r\n\r\n\t\tnp_i2=0;\r\n\t\tif(step<0){\r\n\t\t\tnp_i2=np_i-1;\r\n\t\t\tif(np_i2<start) np_i2+=looplen;\r\n\t\t\tif(np_i2>length) np_i2-=length;\r\n\t\t}else{\r\n\t\t\tnp_i2=np_i+1;\r\n\t\t\tif(np_i2>end) np_i2-=looplen;\r\n\t\t\tif(np_i2<0) np_i2+=length;\r\n\t\t}\r\n\t\tcurrent_read = peek(buff, np_i, channel) * (1-np_f) + np_f*peek(buff, np_i2, channel);\r\n\t\tcurrent_read = fixnan(current_read);\r\n\t\t// possible improvement - before writing, read all the values, sum and average? or a better AA filter than that..\r\n\t\tw = current_write;\r\n\t\tif(fill==1){\r\n\t\t\tpoke(buff,current_write,current_position,channel);\r\n\t\t}else{\r\n\t\t\tws = current_write / fill;//abs(step);\r\n\t\t\tcoeff = (ws - last_write) / step;\r\n\t\t\tw = last_write;\r\n\t\t\tif(step>0){\r\n\t\t\t\t//current_write = in1;\r\n\t\t\t\tif(np_i>current_position){ //one for loop, as it hasn't wrapped\r\n\t\t\t\t\t//diag=0.1;\r\n\t\t\t\t\twhile(current_position<np_i){\r\n\t\t\t\t\t\tw += coeff;\r\n\t\t\t\t\t\tpoke(buff,w,current_position,channel);\r\n\t\t\t\t\t\tcurrent_position+=1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\t//diag=2;\r\n\t\t\t\t\twhile(current_position<end){\r\n\t\t\t\t\t\tw += coeff;\r\n\t\t\t\t\t\tpoke(buff,w,current_position,channel);\r\n\t\t\t\t\t\tcurrent_position+=1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcurrent_position=start;\r\n\t\t\t\t\twhile(current_position<np_i){\r\n\t\t\t\t\t\tw += coeff;\r\n\t\t\t\t\t\tpoke(buff,w,current_position,channel);\t\t\t\t\t\t\r\n\t\t\t\t\t\tcurrent_position+=1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tif(np_i<current_position){ //one for loop, as it hasn't wrapped\r\n\t\t\t\t\tfor(diag=-1;current_position>np_i;current_position-=1){\r\n\t\t\t\t\t\tw -= coeff;\r\n\t\t\t\t\t\tpoke(buff,w,current_position,channel);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tfor(diag=-2;current_position>start;current_position-=1){\r\n\t\t\t\t\t\tw -= coeff;\r\n\t\t\t\t\t\tpoke(buff,w,current_position,channel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(current_position=end;current_position>np_i;current_position-=1){\r\n\t\t\t\t\t\tw -= coeff;\r\n\t\t\t\t\t\tpoke(buff,w,current_position,channel);\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tlast_write = w;\r\n\t\t}\r\n\t\t//last_write = current_write;\r\n\t\t//diag = fill;\r\n\t\t//diag = current_write;//ws;//current_position - np_i;\r\n\t\tcurrent_position = np_i;\r\n\t\tcurrent_write = preserve * current_read + carryover;\r\n\t}\r\n}\r\n\r\nout1 = current_read;\r\nout2 = current_position * ilength;//length;\r\n",
					"fontface" : 0,
					"fontname" : "<Monospaced>",
					"fontsize" : 12.0,
					"id" : "obj-3",
					"maxclass" : "codebox",
					"numinlets" : 2,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 3.0, 32.0, 790.0, 592.0 ]
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-4",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 50.0, 662.0, 35.0, 22.0 ],
					"text" : "out 1"
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 0 ],
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 1 ],
					"source" : [ "obj-2", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-4", 0 ],
					"source" : [ "obj-3", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-7", 0 ],
					"source" : [ "obj-3", 1 ]
				}

			}
 ]
	}

}
